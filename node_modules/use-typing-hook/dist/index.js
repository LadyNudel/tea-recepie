'use strict';

var react = require('react');

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function getRandomBetween() {
  var min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 150;
  var randomNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Math.random();
  return Math.floor(randomNumber * (max - min) + min);
}
function wait(time) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, time);
  });
}

function useTyping(text, min, max) {
  var _useState = react.useState(""),
      _useState2 = _slicedToArray(_useState, 2),
      typing = _useState2[0],
      setTyping = _useState2[1];

  react.useEffect(function () {
    function startTyping() {
      return _startTyping.apply(this, arguments);
    }

    function _startTyping() {
      _startTyping = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

        return regeneratorRuntime.wrap(function _callee$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 3;
                _loop =
                /*#__PURE__*/
                regeneratorRuntime.mark(function _loop() {
                  var letter;
                  return regeneratorRuntime.wrap(function _loop$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          letter = _step.value;
                          setTyping(function (state) {
                            return state + letter;
                          });
                          _context.next = 4;
                          return wait(getRandomBetween(min, max));

                        case 4:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _loop);
                });
                _iterator = text[Symbol.iterator]();

              case 6:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context2.next = 11;
                  break;
                }

                return _context2.delegateYield(_loop(), "t0", 8);

              case 8:
                _iteratorNormalCompletion = true;
                _context2.next = 6;
                break;

              case 11:
                _context2.next = 17;
                break;

              case 13:
                _context2.prev = 13;
                _context2.t1 = _context2["catch"](3);
                _didIteratorError = true;
                _iteratorError = _context2.t1;

              case 17:
                _context2.prev = 17;
                _context2.prev = 18;

                if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                  _iterator["return"]();
                }

              case 20:
                _context2.prev = 20;

                if (!_didIteratorError) {
                  _context2.next = 23;
                  break;
                }

                throw _iteratorError;

              case 23:
                return _context2.finish(20);

              case 24:
                return _context2.finish(17);

              case 25:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee, null, [[3, 13, 17, 25], [18,, 20, 24]]);
      }));
      return _startTyping.apply(this, arguments);
    }

    startTyping();
  }, [text, min, max]);
  return typing;
}

module.exports = useTyping;
//# sourceMappingURL=index.js.map
